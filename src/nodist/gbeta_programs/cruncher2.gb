-- betaenv:descriptor --
(#

   (* TODO make int2str WITHOUT repetitions, labels!!! *)

   int2str: 
     (# n,i: @integer; w: [12]@char; neg: @boolean; result: @string 
     enter n
     do (if n<0 then true->neg; -n->n else false->neg if);
        L:
          (if n=0 then
              (if i=0 then '0'->result else
                  (# wres: [i] @char
                  do (for j:i repeat w[i-j+1]+'0'->wres[j] for);
                     wres->result
                  #)
              if)
           else
              n mod 10 -> w[i+1->i];
              n div 10 -> n;
              restart L
          if);
        (if neg then '-'+result->result if)
     exit result
     #);
   putint: 
     (# n,i: @integer; c: @char; w: [12]@char
     enter n
     do (if n<0 then '-'->stdio; -n->n if);
        L:
          (if n=0 then
              (if i=0 then '0'->stdio else
                  (for j:i repeat w[i-j+1]+'0'->c->stdio for)
              if)
           else
              n mod 10 -> w[i+1->i];
              n div 10 -> n;
              restart L
          if)
     #);


   i2str1: (# int: @integer;
	   str1: @string;
	   enter int
	   do 
	      (* int->str !!!!*)
	   exit str 
	#);

   node: listElement(# 
            init: (# enter id exit this(node)[] #);
            child1: ^node;
            child2: ^node;
            child3: ^node;
            id: @string;
	    myMark: @boolean;        
            changeChildN: (#   tmpNode: ^node;
                             i: @integer; 	
                          enter (i, tmpNode[])
                          do 
                             (if i=1 then tmpNode[]->child1[] if); 
                             (if i=2 then tmpNode[]->child2[] if); 
                             (if i=3 then tmpNode[]->child3[] if); 
                          exit tmpNode
                          #);

            getChild: (#   tmpNode: ^node;
                             i: @integer; 	
                          enter (i)
                          do
                             (if i=1 then child1[]->tmpNode[] if); 
                             (if i=2 then child2[]->tmpNode[] if); 
                             (if i=3 then child3[]->tmpNode[] if); 
                          exit tmpNode
                          #);
            setId: (# tmpId: @string;
                   enter tmpId
		            do
                      tmpId->id;
                   #);
            printMe: (#
                     do	id->stdio;
                        (if child1[] <> NONE then child1.printMe; if);
                        (if child2[] <> NONE then child2.printMe; if);
                        (if child3[] <> NONE then child3.printMe; if);
                     #);

	    mark: (#
		do
		true -> myMark;
		#);

	    unmark: (#
		do
		false -> myMark;
	    #);

	    isMarked: (#
		i: @integer;
		tmpNode: ^node;
		returnVal: @boolean;
		enter i
		do
		  true->returnVal;
		  i->getChild->tmpNode[];
		  (if tmpNode <> NONE then tmpNode.myMark->returnVal; if);
		exit returnVal
	    #);

	 makeChildren: (# 
		tmpInt: @integer;
		enter tmpInt
		do
		tmpInt * 1->int2str->node.init->child1[];
		tmpInt * 2->int2str->node.init->child2[];
		tmpInt * 3->int2str->node.init->child3[];
		exit (child1[], child2[], child3[])
	 #);	
           
         do (*id->stdio;*) INNER

         exit this(node)[]
         #);

	dfs : (#
		v : ^node;
		tmpBool : @boolean;
		enter v[]
		do
		  v.mark;
		  v.printMe;
		  (for i:3 repeat
		     i->v.isMarked->tmpBool;
		     (if tmpBool then
			i->v.getChild->dfs;
		      if);  
		  for);
	#);
   

   list: (#
	head: ^listElement;
	tail: ^listElement;
	elements: @integer;
	add: (# 
		tmpNode: ^listElement
		enter tmpNode[]
		do 
		  (if elements=0 then 
			tmpNode[]->head[];
			head[]->tail[];
			(elements + 1)->elements;
		    else
		        tmpNode[]->tail.next[];
		        tmpNode[]->tail[];
			(elements + 1)->elements;
		   if)
	      #);
	add3: (# 
		tmpNode1, tmpNode2, tmpNode3: ^listElement
		enter (tmpNode1[], tmpNode2[], tmpNode3[])
		do 
		  tmpNode1[]->add;
		  tmpNode2[]->add;
		  tmpNode3[]->add;
	      #);

	makeEmpty: (# do
			  0->elements;
			  tail[]->head[];
		    #);
			  
	isEmpty:  (##);
	#);
		   
   listOld: @list;
   listNew: @list;

   listElement: (#
	next: ^node;
	#);

   makeTree: (#
(* algoritme
  Node root = makeRoot();
  Node tmpNode = root;
  List listOld = new List();
  List listNew = new List();

  listOld.add(root);

  for(unsigned int i = 0; i<depth; i++){ 
    while(tmpNode){
      listNew.add(tmpNode.makeChildren());
      tmpNode = tmpNode.next();
    }
    listOld.makeEmpty();
    tmpNode = listNew.head;
    while(tmpNode){
      listOld.add(tmpNode);
      tmpNode = tmpNode.next();
    }
    listNew.makeEmpty();
  }
*)
	depth: @integer;
	root: ^node;
	tmpNode: ^node;
	continue: @boolean;
	enter depth

	do
	  'root'->node.init->root[];
	  root->listOld.add;
	  (for i:depth repeat
            true->continue;
	    (* make three children for each leaf in tree*)
	    (* iterate list *)
	    listOld.head[]->tmpNode[];
	    (while continue AND (tmpNode <> NONE) do
		 i->tmpNode.makeChildren->listNew.add3;
		 (if tmpNode.next[] <> NONE then 
			tmpNode.next[]->tmpNode[];
		      else 
			false->continue;
		  if);
		listNew.elements->putint;
	    while);
	    (* copy new to old *)
	    listOld.makeEmpty;
	    listNew.head[]->tmpNode[];
	    (while continue AND (tmpNode <> NONE) do
		 tmpNode[]->listOld.add;
		 (if tmpNode.next[] <> NONE then 
			tmpNode.next[]->tmpNode[];
		      else 
			false->continue;
		  if);
	    while);
	    listOld.elements->putint;
	    listNew.makeEmpty;
	  for);
	exit root[]
    	#);

   nd :@node;
   root, n1, n2, n3 : ^nd;
   str: @string;

do 
   100->makeTree->root[];
   (for i:10000 repeat
     root->dfs;
   for);

(* 
	root
     /	|  \
    1   2   3
   /|\    / | \
  4 5 6  7  8  9	
          / | \  
        10  11 12
   'root'->node.init->root[];	
   (1,'1'->node.init)->root.changeChildN->n1[];
   (2,'2'->node.init)->root.changeChildN->n2[];
   (3,'3'->node.init)->root.changeChildN->n3[];
   (1,'4'->node.init)->n1.changeChildN;
   (2,'5'->node.init)->n1.changeChildN;
   (3,'6'->node.init)->n1.changeChildN;
   (1,'7'->node.init)->n3.changeChildN;
   (2,'8'->node.init)->n3.changeChildN->n2[];
   (3,'9'->node.init)->n3.changeChildN;
   (1,'10'->node.init)->n2.changeChildN;
   (2,'11'->node.init)->n2.changeChildN;
   (3,'12'->node.init)->n2.changeChildN;

	change tree
   (for i:10000 repeat  
    'b'->stdio;
    (for i:3 repeat   
   		(i,'1'->node.init)->n1.changeChildN;
   		(i,'2'->node.init->n3[])->n1.changeChildN;
   		(i,'3'->node.init)->n1.changeChildN;
    for);
    'a'->stdio;
   for);
*)
#)






